gudgeon:
  # filesystem locations for gudgeon data
  home: ./.gudgeon/

  # global values
  global:
    maxTtl: 86400 # one day
    minTtl: 0     # allow immediate expiration ttls
    blockResponse: NXDOMAIN # response when a domain is blocked (found in a block list)
                            # can be NXDOMAIN, ENDPOINT, or a specific IP.
                            # NXDOMAIN returns NXDOMAIN (no domain found)
                            # ENDPOINT returns the IP of the endpoint that serviced the request
                            # Setting a specific IP ("192.168.0.1", "0.0.0.0", or "127.0.0.1") will override the response for that domain

  # control network options
  network:
    # enable udp and tcp protocols
    tcp: true
    udp: true
    # interfaces where gudgeon will listen
    endpoints:
    - 0.0.0.0:53

  resolvers:
  # at least oneresolver must be present or gudgeon will not start, if there is no
  # resolver entry named 'default' then the first resolver will be chosen as the 
  # default entry
  - name: default # a name to identify the resolver group
    sources: # a list of sources to use to get IP information
             # these can be:
             # The IP of an upstream server
             # A path to a file (like a hosts file)
             # The name of another DNS group
    - internal
    - local
    - att
    - google
    - cloudflare
  - name: google
    sources:
    - 8.8.8.8
    - 8.8.8.4
  - name: local
    sources:
    - /etc/hosts
  - name: cloudflare
    sources:
    - 1.1.1.1
  - name: att 
    domains: # provide the ability to resolve specific addresses from a different dns (and only those addresses)
    - *.att.net # match a glob style string against the domain
    - *.apple.com
    - twc.com # match just the (sub) domain
    sources:
    - 192.168.1.254
  - name: internal # you can also do domain matching with local/internal sources
    domains:
    - "*.lan"
    - "*.local"
    sources:
    - /etc/gudgeon/hosts/localhosts
    - 192.168.2.6 # and add local intranet for those sources if required 

  # a list of lists to get/download/etc and parse for use to block by various groups
  lists:
  - name: global whitelist
    type: allow # explicitly allow entries in this list
    src: "/etc/gudgeon/lists/global_whitelist.list"
    tags:
    - default
  - name: stevenblack
    src: https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts
    tags:
    - ads
  - name: malwaredomains
    src: https://mirror1.malwaredomains.com/files/justdomains
    tags:
    - malware
  - name: cameleon
    src: http://sysctl.org/cameleon/hosts
    tags:
    - ads
    - malware
  - name: malvertising
    src: https://s3.amazonaws.com/lists.disconnect.me/simple_malvertising.txt
    tags:
    - default
    - malicious
  # the privacy list has no tags so can only be matched explicitly
  - name: privacy
    src: https://v.firebog.net/hosts/Easyprivacy.txt

  # these are groups that tie hosts to the specific set of blocklists
  # that they are supposed to use
  groups:
  # the group name functions as a tag match and the 'default' group is always present
  # but here we are explicitly adding 'ads' and 'malware'. These could also be added
  # by setting 'default' as one of the tags on those lists. since the default group
  # is always present it will be matched by any non-matched consumer. You cannot restrict
  # the default group by consumers.
  - name: default
    tags:
    - ads
    - malware
  # here we define an extra group for use by specific users/machines that provides
  # extra protection against malicious domains.  it explicitly adds the 'privacy' list by name as
  # well as the 'ads' blacklist.
  - name: users
    lists:
    - privacy
    - ads
    blockResponse: ENDPOINT # override the block response for this group
  # here we define an open group. this would be useful for machines that need
  # broader domain access or that have issues with false-positives.
  - name: open

  # consumers are how machine IPs/endpoints/networks are mapped to groups. all
  # unmatched consumers belong to the 'default' group.
  consumers:
  # the endusers group maps a few IPs (explicitly and by range) to the
  # users group which blocks certain categories of DNS domains.
  # (and the default group)
  - name: endusers
    groups:
    - default
    - users
    matches:
    # explicit ip match
    - ip: 10.0.0.30
    # range match
    - range:
        start: 10.0.0.35
        end: 10.0.0.45
  # the openmachines group maps to the open (and default) group and does so for the
  # entire 10.0.2.0/24 subnet.
  - name: openmachines
    groups:
    - default
    - open
    matches:
    # subnet match
    - net: 10.0.2.0/24
